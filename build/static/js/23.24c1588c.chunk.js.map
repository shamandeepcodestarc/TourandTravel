{"version":3,"sources":["../../src/utils/isWeb.ts","../../src/constants.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/reactstrap/es/ModalHeader.js","../node_modules/reactstrap/es/ModalBody.js","../node_modules/reactstrap/es/ModalFooter.js","../node_modules/reactstrap/es/Portal.js","../node_modules/reactstrap/es/Modal.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js"],"names":["window","document","isWeb","FormContext","React.createContext","displayName","_toConsumableArray","arr","Array","isArray","i","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","propTypes","tag","tagPropType","wrapTag","toggle","PropTypes","func","className","string","cssModule","object","children","node","closeAriaLabel","charCode","oneOfType","number","close","ModalHeader","props","closeButton","Tag","WrapTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","closeIcon","String","fromCharCode","React","createElement","type","onClick","_extends","defaultProps","ModalBody","ModalFooter","isRequired","any","Portal","_React$Component","apply","this","arguments","_inheritsLoose","_proto","componentWillUnmount","defaultNode","body","removeChild","render","canUseDOM","appendChild","ReactDOM","createPortal","Component","noop","FadePropTypes","shape","Fade","isOpen","bool","autoFocus","centered","scrollable","size","keyboard","role","labelledBy","backdrop","oneOf","onEnter","onExit","onOpened","onClosed","wrapClassName","modalClassName","backdropClassName","contentClassName","external","fade","zIndex","backdropTransition","modalTransition","innerRef","unmountOnClose","returnFocusAfterClose","propsToOmit","keys","timeout","TransitionTimeouts","Modal","mountOnEnter","_this","_element","_originalBodyPadding","getFocusableChildren","bind","_assertThisInitialized","handleBackdropClick","handleBackdropMouseDown","handleEscape","handleStaticBackdropAnimation","handleTab","manageFocusAfterClose","clearBackdropAnimationTimeout","state","showStaticBackdropAnimation","componentDidMount","_this$props","init","setState","setFocus","_isMounted","componentDidUpdate","prevProps","prevState","style","destroy","isAppearing","onEntered","onExited","_dialog","parentNode","focus","querySelectorAll","focusableElements","join","getFocusedChild","currentFocus","focusableChildren","activeElement","err","e","target","_mouseDownElement","stopPropagation","which","totalFocusable","focusedIndex","shiftKey","preventDefault","keyCode","keyCodes","esc","_this2","_backdropAnimationTimeout","setTimeout","_triggeringElement","setAttribute","position","getOriginalBodyPadding","conditionallyUpdateScrollbar","openCount","modalOpenClassName","modalOpenClassNameRegex","RegExp","replace","trim","Math","max","setScrollbarWidth","renderModalDialog","_classNames","_this3","omit","dialogBaseClass","ref","c","isModalHidden","display","_this$props2","modalAttributes","onMouseDown","onKeyUp","onKeyDown","tabIndex","hasTransition","_objectSpread2","baseClass","Backdrop","in","clearTimeout","undefined","module","exports","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","value","makeInvokeMethod","fn","obj","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/23.24c1588c.chunk.js","sourcesContent":["import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  wrapTag: tagPropType,\n  toggle: PropTypes.func,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  closeAriaLabel: PropTypes.string,\n  charCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  close: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'h5',\n  wrapTag: 'div',\n  closeAriaLabel: 'Close',\n  charCode: 215\n};\n\nvar ModalHeader = function ModalHeader(props) {\n  var closeButton;\n\n  var className = props.className,\n      cssModule = props.cssModule,\n      children = props.children,\n      toggle = props.toggle,\n      Tag = props.tag,\n      WrapTag = props.wrapTag,\n      closeAriaLabel = props.closeAriaLabel,\n      charCode = props.charCode,\n      close = props.close,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"children\", \"toggle\", \"tag\", \"wrapTag\", \"closeAriaLabel\", \"charCode\", \"close\"]);\n\n  var classes = mapToCssModules(classNames(className, 'modal-header'), cssModule);\n\n  if (!close && toggle) {\n    var closeIcon = typeof charCode === 'number' ? String.fromCharCode(charCode) : charCode;\n    closeButton = React.createElement(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: mapToCssModules('close', cssModule),\n      \"aria-label\": closeAriaLabel\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, closeIcon));\n  }\n\n  return React.createElement(WrapTag, _extends({}, attributes, {\n    className: classes\n  }), React.createElement(Tag, {\n    className: mapToCssModules('modal-title', cssModule)\n  }, children), close || closeButton);\n};\n\nModalHeader.propTypes = propTypes;\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar ModalBody = function ModalBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'modal-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nModalBody.propTypes = propTypes;\nModalBody.defaultProps = defaultProps;\nexport default ModalBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar ModalFooter = function ModalFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'modal-footer'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nModalFooter.propTypes = propTypes;\nModalFooter.defaultProps = defaultProps;\nexport default ModalFooter;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { canUseDOM } from './utils';\nvar propTypes = {\n  children: PropTypes.node.isRequired,\n  node: PropTypes.any\n};\n\nvar Portal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Portal, _React$Component);\n\n  function Portal() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Portal.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.defaultNode) {\n      document.body.removeChild(this.defaultNode);\n    }\n\n    this.defaultNode = null;\n  };\n\n  _proto.render = function render() {\n    if (!canUseDOM) {\n      return null;\n    }\n\n    if (!this.props.node && !this.defaultNode) {\n      this.defaultNode = document.createElement('div');\n      document.body.appendChild(this.defaultNode);\n    }\n\n    return ReactDOM.createPortal(this.props.children, this.props.node || this.defaultNode);\n  };\n\n  return Portal;\n}(React.Component);\n\nPortal.propTypes = propTypes;\nexport default Portal;","import _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Portal from './Portal';\nimport Fade from './Fade';\nimport { getOriginalBodyPadding, conditionallyUpdateScrollbar, setScrollbarWidth, mapToCssModules, omit, focusableElements, TransitionTimeouts, keyCodes } from './utils';\n\nfunction noop() {}\n\nvar FadePropTypes = PropTypes.shape(Fade.propTypes);\nvar propTypes = {\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  centered: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.string,\n  toggle: PropTypes.func,\n  keyboard: PropTypes.bool,\n  role: PropTypes.string,\n  labelledBy: PropTypes.string,\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  onEnter: PropTypes.func,\n  onExit: PropTypes.func,\n  onOpened: PropTypes.func,\n  onClosed: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  external: PropTypes.node,\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  backdropTransition: FadePropTypes,\n  modalTransition: FadePropTypes,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func]),\n  unmountOnClose: PropTypes.bool,\n  returnFocusAfterClose: PropTypes.bool\n};\nvar propsToOmit = Object.keys(propTypes);\nvar defaultProps = {\n  isOpen: false,\n  autoFocus: true,\n  centered: false,\n  scrollable: false,\n  role: 'dialog',\n  backdrop: true,\n  keyboard: true,\n  zIndex: 1050,\n  fade: true,\n  onOpened: noop,\n  onClosed: noop,\n  modalTransition: {\n    timeout: TransitionTimeouts.Modal\n  },\n  backdropTransition: {\n    mountOnEnter: true,\n    timeout: TransitionTimeouts.Fade // uses standard fade transition\n\n  },\n  unmountOnClose: true,\n  returnFocusAfterClose: true\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Modal, _React$Component);\n\n  function Modal(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this._element = null;\n    _this._originalBodyPadding = null;\n    _this.getFocusableChildren = _this.getFocusableChildren.bind(_assertThisInitialized(_this));\n    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_this));\n    _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind(_assertThisInitialized(_this));\n    _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_this));\n    _this.handleStaticBackdropAnimation = _this.handleStaticBackdropAnimation.bind(_assertThisInitialized(_this));\n    _this.handleTab = _this.handleTab.bind(_assertThisInitialized(_this));\n    _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_this));\n    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_this));\n    _this.manageFocusAfterClose = _this.manageFocusAfterClose.bind(_assertThisInitialized(_this));\n    _this.clearBackdropAnimationTimeout = _this.clearBackdropAnimationTimeout.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isOpen: false,\n      showStaticBackdropAnimation: false\n    };\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props = this.props,\n        isOpen = _this$props.isOpen,\n        autoFocus = _this$props.autoFocus,\n        onEnter = _this$props.onEnter;\n\n    if (isOpen) {\n      this.init();\n      this.setState({\n        isOpen: true\n      });\n\n      if (autoFocus) {\n        this.setFocus();\n      }\n    }\n\n    if (onEnter) {\n      onEnter();\n    }\n\n    this._isMounted = true;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (this.props.isOpen && !prevProps.isOpen) {\n      this.init();\n      this.setState({\n        isOpen: true\n      }); // let render() renders Modal Dialog first\n\n      return;\n    } // now Modal Dialog is rendered and we can refer this._element and this._dialog\n\n\n    if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {\n      this.setFocus();\n    }\n\n    if (this._element && prevProps.zIndex !== this.props.zIndex) {\n      this._element.style.zIndex = this.props.zIndex;\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.clearBackdropAnimationTimeout();\n\n    if (this.props.onExit) {\n      this.props.onExit();\n    }\n\n    if (this._element) {\n      this.destroy();\n\n      if (this.props.isOpen) {\n        this.close();\n      }\n    }\n\n    this._isMounted = false;\n  };\n\n  _proto.onOpened = function onOpened(node, isAppearing) {\n    this.props.onOpened();\n    (this.props.modalTransition.onEntered || noop)(node, isAppearing);\n  };\n\n  _proto.onClosed = function onClosed(node) {\n    var unmountOnClose = this.props.unmountOnClose; // so all methods get called before it is unmounted\n\n    this.props.onClosed();\n    (this.props.modalTransition.onExited || noop)(node);\n\n    if (unmountOnClose) {\n      this.destroy();\n    }\n\n    this.close();\n\n    if (this._isMounted) {\n      this.setState({\n        isOpen: false\n      });\n    }\n  };\n\n  _proto.setFocus = function setFocus() {\n    if (this._dialog && this._dialog.parentNode && typeof this._dialog.parentNode.focus === 'function') {\n      this._dialog.parentNode.focus();\n    }\n  };\n\n  _proto.getFocusableChildren = function getFocusableChildren() {\n    return this._element.querySelectorAll(focusableElements.join(', '));\n  };\n\n  _proto.getFocusedChild = function getFocusedChild() {\n    var currentFocus;\n    var focusableChildren = this.getFocusableChildren();\n\n    try {\n      currentFocus = document.activeElement;\n    } catch (err) {\n      currentFocus = focusableChildren[0];\n    }\n\n    return currentFocus;\n  } // not mouseUp because scrollbar fires it, shouldn't close when user scrolls\n  ;\n\n  _proto.handleBackdropClick = function handleBackdropClick(e) {\n    if (e.target === this._mouseDownElement) {\n      e.stopPropagation();\n      var backdrop = this._dialog ? this._dialog.parentNode : null;\n\n      if (backdrop && e.target === backdrop && this.props.backdrop === 'static') {\n        this.handleStaticBackdropAnimation();\n      }\n\n      if (!this.props.isOpen || this.props.backdrop !== true) return;\n\n      if (backdrop && e.target === backdrop && this.props.toggle) {\n        this.props.toggle(e);\n      }\n    }\n  };\n\n  _proto.handleTab = function handleTab(e) {\n    if (e.which !== 9) return;\n    var focusableChildren = this.getFocusableChildren();\n    var totalFocusable = focusableChildren.length;\n    if (totalFocusable === 0) return;\n    var currentFocus = this.getFocusedChild();\n    var focusedIndex = 0;\n\n    for (var i = 0; i < totalFocusable; i += 1) {\n      if (focusableChildren[i] === currentFocus) {\n        focusedIndex = i;\n        break;\n      }\n    }\n\n    if (e.shiftKey && focusedIndex === 0) {\n      e.preventDefault();\n      focusableChildren[totalFocusable - 1].focus();\n    } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {\n      e.preventDefault();\n      focusableChildren[0].focus();\n    }\n  };\n\n  _proto.handleBackdropMouseDown = function handleBackdropMouseDown(e) {\n    this._mouseDownElement = e.target;\n  };\n\n  _proto.handleEscape = function handleEscape(e) {\n    if (this.props.isOpen && e.keyCode === keyCodes.esc && this.props.toggle) {\n      if (this.props.keyboard) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.props.toggle(e);\n      } else if (this.props.backdrop === 'static') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.handleStaticBackdropAnimation();\n      }\n    }\n  };\n\n  _proto.handleStaticBackdropAnimation = function handleStaticBackdropAnimation() {\n    var _this2 = this;\n\n    this.clearBackdropAnimationTimeout();\n    this.setState({\n      showStaticBackdropAnimation: true\n    });\n    this._backdropAnimationTimeout = setTimeout(function () {\n      _this2.setState({\n        showStaticBackdropAnimation: false\n      });\n    }, 100);\n  };\n\n  _proto.init = function init() {\n    try {\n      this._triggeringElement = document.activeElement;\n    } catch (err) {\n      this._triggeringElement = null;\n    }\n\n    if (!this._element) {\n      this._element = document.createElement('div');\n\n      this._element.setAttribute('tabindex', '-1');\n\n      this._element.style.position = 'relative';\n      this._element.style.zIndex = this.props.zIndex;\n      document.body.appendChild(this._element);\n    }\n\n    this._originalBodyPadding = getOriginalBodyPadding();\n    conditionallyUpdateScrollbar();\n\n    if (Modal.openCount === 0) {\n      document.body.className = classNames(document.body.className, mapToCssModules('modal-open', this.props.cssModule));\n    }\n\n    Modal.openCount += 1;\n  };\n\n  _proto.destroy = function destroy() {\n    if (this._element) {\n      document.body.removeChild(this._element);\n      this._element = null;\n    }\n\n    this.manageFocusAfterClose();\n  };\n\n  _proto.manageFocusAfterClose = function manageFocusAfterClose() {\n    if (this._triggeringElement) {\n      var returnFocusAfterClose = this.props.returnFocusAfterClose;\n      if (this._triggeringElement.focus && returnFocusAfterClose) this._triggeringElement.focus();\n      this._triggeringElement = null;\n    }\n  };\n\n  _proto.close = function close() {\n    if (Modal.openCount <= 1) {\n      var modalOpenClassName = mapToCssModules('modal-open', this.props.cssModule); // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`\n\n      var modalOpenClassNameRegex = new RegExp(\"(^| )\" + modalOpenClassName + \"( |$)\");\n      document.body.className = document.body.className.replace(modalOpenClassNameRegex, ' ').trim();\n    }\n\n    this.manageFocusAfterClose();\n    Modal.openCount = Math.max(0, Modal.openCount - 1);\n    setScrollbarWidth(this._originalBodyPadding);\n  };\n\n  _proto.renderModalDialog = function renderModalDialog() {\n    var _classNames,\n        _this3 = this;\n\n    var attributes = omit(this.props, propsToOmit);\n    var dialogBaseClass = 'modal-dialog';\n    return React.createElement(\"div\", _extends({}, attributes, {\n      className: mapToCssModules(classNames(dialogBaseClass, this.props.className, (_classNames = {}, _classNames[\"modal-\" + this.props.size] = this.props.size, _classNames[dialogBaseClass + \"-centered\"] = this.props.centered, _classNames[dialogBaseClass + \"-scrollable\"] = this.props.scrollable, _classNames)), this.props.cssModule),\n      role: \"document\",\n      ref: function ref(c) {\n        _this3._dialog = c;\n      }\n    }), React.createElement(\"div\", {\n      className: mapToCssModules(classNames('modal-content', this.props.contentClassName), this.props.cssModule)\n    }, this.props.children));\n  };\n\n  _proto.render = function render() {\n    var unmountOnClose = this.props.unmountOnClose;\n\n    if (!!this._element && (this.state.isOpen || !unmountOnClose)) {\n      var isModalHidden = !!this._element && !this.state.isOpen && !unmountOnClose;\n      this._element.style.display = isModalHidden ? 'none' : 'block';\n      var _this$props2 = this.props,\n          wrapClassName = _this$props2.wrapClassName,\n          modalClassName = _this$props2.modalClassName,\n          backdropClassName = _this$props2.backdropClassName,\n          cssModule = _this$props2.cssModule,\n          isOpen = _this$props2.isOpen,\n          backdrop = _this$props2.backdrop,\n          role = _this$props2.role,\n          labelledBy = _this$props2.labelledBy,\n          external = _this$props2.external,\n          innerRef = _this$props2.innerRef;\n      var modalAttributes = {\n        onClick: this.handleBackdropClick,\n        onMouseDown: this.handleBackdropMouseDown,\n        onKeyUp: this.handleEscape,\n        onKeyDown: this.handleTab,\n        style: {\n          display: 'block'\n        },\n        'aria-labelledby': labelledBy,\n        role: role,\n        tabIndex: '-1'\n      };\n      var hasTransition = this.props.fade;\n\n      var modalTransition = _objectSpread2({}, Fade.defaultProps, {}, this.props.modalTransition, {\n        baseClass: hasTransition ? this.props.modalTransition.baseClass : '',\n        timeout: hasTransition ? this.props.modalTransition.timeout : 0\n      });\n\n      var backdropTransition = _objectSpread2({}, Fade.defaultProps, {}, this.props.backdropTransition, {\n        baseClass: hasTransition ? this.props.backdropTransition.baseClass : '',\n        timeout: hasTransition ? this.props.backdropTransition.timeout : 0\n      });\n\n      var Backdrop = backdrop && (hasTransition ? React.createElement(Fade, _extends({}, backdropTransition, {\n        in: isOpen && !!backdrop,\n        cssModule: cssModule,\n        className: mapToCssModules(classNames('modal-backdrop', backdropClassName), cssModule)\n      })) : React.createElement(\"div\", {\n        className: mapToCssModules(classNames('modal-backdrop', 'show', backdropClassName), cssModule)\n      }));\n      return React.createElement(Portal, {\n        node: this._element\n      }, React.createElement(\"div\", {\n        className: mapToCssModules(wrapClassName)\n      }, React.createElement(Fade, _extends({}, modalAttributes, modalTransition, {\n        in: isOpen,\n        onEntered: this.onOpened,\n        onExited: this.onClosed,\n        cssModule: cssModule,\n        className: mapToCssModules(classNames('modal', modalClassName, this.state.showStaticBackdropAnimation && 'modal-static'), cssModule),\n        innerRef: innerRef\n      }), external, this.renderModalDialog()), Backdrop));\n    }\n\n    return null;\n  };\n\n  _proto.clearBackdropAnimationTimeout = function clearBackdropAnimationTimeout() {\n    if (this._backdropAnimationTimeout) {\n      clearTimeout(this._backdropAnimationTimeout);\n      this._backdropAnimationTimeout = undefined;\n    }\n  };\n\n  return Modal;\n}(React.Component);\n\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\nModal.openCount = 0;\nexport default Modal;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}