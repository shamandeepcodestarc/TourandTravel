{"version":3,"sources":["components/register/register.js"],"names":["register","validateNumber","evt","theEvent","window","event","type","key","clipboardData","getData","keyCode","which","String","fromCharCode","test","returnValue","preventDefault","onChangehandler","target","name","value","checked","state","Form","FormErrors","setState","Object","keys","includes","FormErrorsObj","refValue","errorMsg","validateField","password","length","validateForm","validateFunc","errorObj","map","x","msg","onSignInHandler","console","log","email","role","localStorage","getItem","isLoggedIn","to","md","className","htmlFor","id","placeholder","username","onChange","this","onBlur","style","color","errMsg","onClick","Component"],"mappings":"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","file":"static/js/32.6884351e.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  CardBody,\r\n  Card,\r\n  CardTitle,\r\n  FormText,\r\n  Form,\r\n  CustomInput,\r\n  Label,\r\n  FormGroup,\r\n  Input,\r\n  Button\r\n} from 'reactstrap'; import axios from \"axios\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport common from \"../../common/common\";\r\n\r\n/*\r\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\nconst nameRegex = RegExp(/^[a-zA-Z]+$/);\r\nconst validateForm = (errors) => {\r\n  let valid = true;\r\n  Object.values(errors).forEach(\r\n    (val) => val.length > 0 && (valid = false)\r\n  );\r\n  return valid;\r\n}*/\r\n\r\nexport default class register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Form: {\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      FormErrors: {\r\n        name: null,\r\n        email: null,\r\n        password: null\r\n      }\r\n    };\r\n  }\r\n\r\n    validateNumber = evt => {\r\n      var theEvent = evt || window.event;\r\n  \r\n      // Handle paste\r\n      if (theEvent.type === \"paste\") {\r\n        key = theEvent.clipboardData.getData(\"text/plain\");\r\n      } else {\r\n        // Handle key press\r\n        var key = theEvent.keyCode || theEvent.which;\r\n        key = String.fromCharCode(key);\r\n      }\r\n      var regex = /[0-9]|\\./;\r\n      if (!regex.test(key)) {\r\n        theEvent.returnValue = false;\r\n        if (theEvent.preventDefault) theEvent.preventDefault();\r\n      }\r\n    };\r\n\r\n  onChangehandler = (event) => {\r\n    event.preventDefault();\r\n    const { name, value, checked } = event.target;\r\n    const { Form, FormErrors } = this.state;\r\n  \r\n\r\n    this.setState({ Form}, () => \r\n    {\r\n\r\n      if (!Object.keys(FormErrors).includes(name)) return;\r\n      let FormErrorsObj = {};\r\n      if (name === \"password\")\r\n      {\r\n        let refValue = this.state.Form[\r\n          name === \"password\" \r\n        ];\r\n        const errorMsg = this.validateField(name, value, refValue);\r\n        FormErrorsObj = { ...FormErrors, [name]: errorMsg };\r\n        if (!errorMsg && refValue) {\r\n          FormErrorsObj.password = null;\r\n        }\r\n      } else {\r\n        const errorMsg = this.validateField(\r\n          name,\r\n          name === \"language\" ? this.state.Form[\"language\"] : value\r\n        );\r\n        FormErrorsObj = { ...FormErrors, [name]: errorMsg };\r\n      }\r\n      this.setState({ FormErrors: FormErrorsObj });\r\n    });\r\n  };\r\n  \r\n\r\n\r\n\r\n  validateField = (name, value, refValue) => {\r\n    let errorMsg = null;\r\n    switch (name) {\r\n      case \"name\":\r\n        if (!value)\r\n       errorMsg = \"Please enter Name.\";\r\n       break;\r\n      case \"email\":\r\n        if (!value)\r\n         errorMsg = \"Please enter Email.\";\r\n        else if (\r\n          !/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n            value\r\n          )\r\n        )\r\n          errorMsg = \"Please enter valid Email.\";\r\n        break;\r\n      \r\n      \r\n      case \"password\":\r\n        if (!value) errorMsg = \"Please enter password.\";\r\n        \r\n         \r\n \r\n      let refValue=8\r\n      if (refValue && value.length !== refValue)\r\n        errorMsg = \"Password at least 10 character\";\r\n\r\n        break;\r\n        default:\r\n        break;\r\n    }\r\n    return errorMsg;\r\n  };\r\n\r\n\r\n  validateForm = (Form,FormErrors, validateFunc) => {\r\n    const errorObj = {};\r\n   /*\r\n    Object.keys(FormErrors).map(x => {\r\n      let refValue = null;\r\n      if (x === \"password\" || x === \"confirmPassword\") {\r\n        refValue = form[x === \"password\" ? \"confirmPassword\" : \"password\"];\r\n      }\r\n      const msg = validateFunc(x, form[x], refValue);\r\n      if (msg) errorObj[x] = msg;\r\n    });*/\r\n    Object.keys(FormErrors).map(x => {\r\n  let refValue=null;\r\n      if(x===\"paswsword\")\r\n      {\r\n        refValue = Form[x === \"password\"];\r\n      }\r\n      const msg = validateFunc(x, Form[x], refValue);\r\n      if (msg) errorObj[x] = msg;\r\n    });\r\n    return errorObj;\r\n  };\r\n \r\n\r\n\r\n\r\n\r\n  onSignInHandler = () => {\r\n  \r\n      const { Form, FormErrors } = this.state;\r\n      const errorObj = this.validateForm(Form, FormErrors, this.validateField);\r\n      if (Object.keys(errorObj).length !== 0) {\r\n        this.setState({ FormErrors: { ...FormErrors, ...errorObj } });\r\n        return false;\r\n      }\r\n      console.log(\"Data: \", Form);\r\n    };\r\n\r\n\r\n\r\n\r\n  render() {\r\n    let role = localStorage.getItem(\"role\");\r\n    let isLoggedIn = localStorage.getItem(\"IsLoggedIn\")\r\n    if (!role && !isLoggedIn) {\r\n\r\n      return (\r\n        <Fragment>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <Row>\r\n            <Col md=\"4\"></Col>\r\n            <Col md=\"4\">\r\n              <Card className=\"card-box mb-5\">\r\n                <CardBody>\r\n                  <h1 className=\"text-center\">Register</h1>\r\n                  <Form className=\"containers\">\r\n                    <FormGroup>\r\n                      <Label htmlFor=\"exampleEmail\">Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"exampleName\"\r\n                        placeholder=\"please enter the name\"\r\n                        value={Form.username}\r\n                        onChange={this.onChangehandler}\r\n                        onBlur={this.onChangehandler}\r\n                      />\r\n                      {this.state.FormErrors.name && (\r\n                        <span className=\"err\"style={{ color: \"red\" }}>{this.state.FormErrors.name}</span>\r\n                      )}\r\n\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label htmlFor=\"exampleEmail\">Email</Label>\r\n                      <Input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"exampleEmail\"\r\n                        placeholder=\"please enter your email\"\r\n                        value={Form.email}\r\n                        onChange={this.onChangehandler}\r\n                        onBlur={this.onChangehandler}\r\n                      />\r\n                      {this.state.FormErrors.email && (\r\n                        <span className=\"err\"style={{ color: \"red\" }}>{this.state.FormErrors.email}</span>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label htmlFor=\"examplePassword\">Password</Label>\r\n                      <Input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"examplePassword\"\r\n                        placeholder=\"please enter the password\"\r\n                        value={Form.password}\r\n                        onChange={this.onChangehandler}\r\n                        onBlur={this.onChangehandler}\r\n                      />\r\n                      {this.state.FormErrors.password && (\r\n                        <span className=\"err\"style={{ color: \"red\" }}>{this.state.FormErrors.password}</span>\r\n                      )}\r\n                    </FormGroup>\r\n                    <p className=\"text-danger\">{this.state.errMsg}</p>\r\n                    <center>\r\n                    <Button className=\"m-2\" color=\"second\" onClick={this.onSignInHandler}>\r\n                      sign up\r\n      </Button>\r\n      </center>\r\n                  </Form>\r\n                  <center>\r\n                  <Row>\r\n                    <Col md=\"4\"></Col>\r\n                   \r\n                    <Button color=\"link\" className=\"m-2 btn-link-warning\">\r\n                      <span><Link to=\"/sign-in\">back to  login</Link></span>\r\n                    </Button>\r\n                   \r\n                  </Row>\r\n                  </center>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Fragment>\r\n      );\r\n    } else {\r\n      return <Redirect to='/DashboardDefault' />\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}